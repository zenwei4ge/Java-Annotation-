内置注解，主要有3个，如下：
        @Override：用于标明此方法覆盖了父类的方法，源码如下

        @Target(ElementType.METHOD)
        @Retention(RetentionPolicy.SOURCE)
        public @interface Override {
        }
        @Deprecated：用于标明已经过时的方法或类，源码如下，关于@Documented稍后分析：

        @Documented
        @Retention(RetentionPolicy.RUNTIME)
        @Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE})
        public @interface Deprecated {
        }
        @SuppressWarnnings:用于有选择的关闭编译器对类、方法、成员变量、变量初始化的警告，其实现源码如下：

        @Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})
        @Retention(RetentionPolicy.SOURCE)
        public @interface SuppressWarnings {
            String[] value();
        }
        其内部有一个String数组，主要接收值如下：

        deprecation：使用了不赞成使用的类或方法时的警告；
        unchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型; 
        fallthrough：当 Switch 程序块直接通往下一种情况而没有 Break 时的警告;
        path：在类路径、源文件路径等中有不存在的路径时的警告; 
        serial：当在可序列化的类上缺少 serialVersionUID 定义时的警告; 
        finally：任何 finally 子句不能正常完成时的警告; 
        all：关于以上所有情况的警告。
        简单案例
        //注明该类已过时，不建议使用
        @Deprecated
        class A{
            public void A(){ }

            //注明该方法已过时，不建议使用
            @Deprecated()
            public void B(){ }
        }

        class B extends A{

            @Override //标明覆盖父类A的A方法
            public void A() {
                super.A();
            }

            //去掉检测警告
            @SuppressWarnings({"uncheck","deprecation"})
            public void C(){ } 
            //去掉检测警告
            @SuppressWarnings("uncheck")
            public void D(){ }
        }
两种元注解，@Documented和@Inherited
        @Documented 被修饰的注解会生成到javadoc中

        /**
         * Created by zejian on 2017/5/20.
         * Blog : http://blog.csdn.net/javazejian [原文地址,请尊重原创]
         */
        @Documented
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface DocumentA {
        }

        //没有使用@Documented
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface DocumentB {
        }

        //使用注解
        @DocumentA
        @DocumentB
        public class DocumentDemo {
            public void A(){
            }
            
        @Inherited 可以让注解被继承，但这并不是真的继承，只是通过使用@Inherited，可以让子类Class对象使用getAnnotations()获取父类被@Inherited修饰的注解，如下：

        @Inherited
        @Documented
        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface DocumentA {
        }

        @Target(ElementType.TYPE)
        @Retention(RetentionPolicy.RUNTIME)
        public @interface DocumentB {
        }

        @DocumentA
        class A{ }

        class B extends A{ }

        @DocumentB
        class C{ }

        class D extends C{ }

        //测试
        public class DocumentDemo {

            public static void main(String... args){
                A instanceA=new B();
                System.out.println("已使用的@Inherited注解:"+Arrays.toString(instanceA.getClass().getAnnotations()));

                C instanceC = new D();

                System.out.println("没有使用的@Inherited注解:"+Arrays.toString(instanceC.getClass().getAnnotations()));
            }

            /**
             * 运行结果:
             已使用的@Inherited注解:[@com.zejian.annotationdemo.DocumentA()]
             没有使用的@Inherited注解:[]
             */

